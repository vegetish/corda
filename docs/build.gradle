apply plugin: 'org.jetbrains.dokka'

dependencies {
    compile rootProject
}

dokka {
    moduleName = 'corda'
    outputDirectory = file("${rootProject.rootDir}/docs/build/html/api/kotlin")
    processConfigurations = ['compile']
    // TODO: Re-add '../testing/node-driver/src/main/kotlin', '../testing/test-utils/src/main/kotlin' when they're API stable
    // TODO: Add '../client/jfx/src/main/kotlin' and '../client/mock/src/main/kotlin' if we decide to make them into public API
    sourceDirs = files('../core/src/main/kotlin', '../client/rpc/src/main/kotlin', '../finance/src/main/kotlin', '../client/jackson/src/main/kotlin')
    includes = ['packages.md']
    jdkVersion = 8

    externalDocumentationLink {
        url = new URL("http://fasterxml.github.io/jackson-core/javadoc/2.8/")
    }
    externalDocumentationLink {
        url = new URL("https://docs.oracle.com/javafx/2/api/")
    }
    externalDocumentationLink {
        url = new URL("http://www.bouncycastle.org/docs/docs1.5on/")
    }

    packageOptions {
        prefix = 'net.corda.core.internal'
        suppress = true
    }
    packageOptions {
        prefix = 'net.corda.client.rpc.internal'
        suppress = true
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    moduleName = 'corda'
    outputFormat = "javadoc"
    outputDirectory = file("${rootProject.rootDir}/docs/build/html/api/javadoc")
    processConfigurations = ['compile']
    // TODO: Make this a copy of the list above programmatically.
    sourceDirs = files('../core/src/main/kotlin', '../client/rpc/src/main/kotlin', '../finance/src/main/kotlin', '../client/jackson/src/main/kotlin')
    includes = ['packages.md']
    jdkVersion = 8

    externalDocumentationLink {
        url = new URL("http://fasterxml.github.io/jackson-core/javadoc/2.8/")
    }
    externalDocumentationLink {
        url = new URL("https://docs.oracle.com/javafx/2/api/")
    }
    externalDocumentationLink {
        url = new URL("http://www.bouncycastle.org/docs/docs1.5on/")
    }

    packageOptions {
        prefix = 'net.corda.core.internal'
        suppress = true
    }
    packageOptions {
        prefix = 'net.corda.client.rpc.internal'
        suppress = true
    }
}

task buildDocs(dependsOn: ['apidocs', 'makeDocs'])
task apidocs(dependsOn: ['dokka', 'dokkaJavadoc'])

task makeDocs(type: Exec, dependsOn: ['installDocsiteRequirements']) {
    // TODO: Non-msys Windows script
    commandLine 'cmd', '/c', 'bash make-docsite.sh' // Windows
    commandLine 'bash', './make-docsite.sh' // Linux
}

task installDocsiteRequirements(type: Exec) {
    // TODO: Non-msys Windows script
    commandLine 'cmd', '/c', 'bash install-docsite-requirements.sh' // Windows
    commandLine 'bash', './install-docsite-requirements.sh' // Linux
}

apidocs.shouldRunAfter makeDocs
